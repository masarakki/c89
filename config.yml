# review-epubmaker向けの設定ファイルの例。
# yamlファイルをRe:VIEWファイルのある場所に置き、
# 「review-epubmaker yamlファイル」を実行すると、<bookname>.epubファイルが
# 生成されます。
# このファイルはUTF-8エンコーディングで記述してください。

# ブック名(ファイル名になるもの。ASCII範囲の文字を使用)
bookname: c89
# 書名
booktitle: プログラマの生き様
okuduke_keys:
  - dat
  - aut
  - crl
  - rep
  - gitbook
  - prt
# 著者
dat: C89 2015.12.31
aut: まさらっき
crl: NP-complete
rep: https://github.com/np-complete/c89
gitbook: http://masarakki.gitbooks.io/c89-the-way-of-programmer-life/
prt: Kinko's

# 以下はオプション
# asn: Associated name
# ant: Bibliographic antecedent
# clb: 貢献者
# csl: 監修者
# edt: 編集者
# dsr: デザイナ
# ill: イラストレータ
# pht: 撮影者
# trl: 翻訳者
date: 2014-12-30
# rights: 権利表記
# description: ブックの説明
#
# coverfile: カバーページのbody要素内に挿入する内容を記述したファイル名
#
# coverimage: カバー用画像。画像ディレクトリ内に置いてもディレクトリ名は不要(例: cover.jpg)
#
# 固有IDに使用するドメイン。指定しない場合には、時刻に基づくランダムUUIDが入る
# urnid: urn:uid:http://example.com/some-book-title/1.0.2/
# CSSファイル (yamlファイルおよびRe:VIEWファイルを置いたディレクトリにあること)
stylesheet: stylesheet.css
# LaTeX用のスタイルファイル(styディレクトリ以下に置くこと)
# texstyle: samplemacro
# LaTeX用のdocumentclassを指定する
# texdocumentclass: ["jsarticle", "b5paper,oneside"]
texdocumentclass: ["jsbook", "twoside,openany"]
# LaTeX用のコマンドを指定する(platex or lualatex)
# texcommand: "platex"
# 目次として抽出するレベル
toclevel: 3
# セクション番号を表示するレベル
secnolevel: 2
# EPUBのバージョン(現時点では2または3。デフォルトは2)
epubversion: 3
# HTMLのバージョン(現時点では4または5。デフォルトは4。epubversionを3にした場合は自動で5に設定される)
htmlversion: 5
# 表紙を出力するか
titlepage: true
coverfile: titlepage.tex
# 目次を出力するか
toc: false
# EPUB標準の目次以外に目次を作成するか
mytoc: true
# 奥付を作成するか。デフォルトでは作成されない。trueを指定するとデフォルトの奥付、ファイル名を指定するとそれがcolophon.htmlとしてコピーされる
colophon: true
# XHTML生成後に実行するプログラム。$1:HTMLの生成されたディレクトリ $2:Re:VIEWファイルのあるディレクトリ $3:起動時指定のyamlファイル名
# posthook: hook.sh
# EPUBで表紙をコンテンツに含めるか。デフォルトでは作成されない。yesにするとiBooks等でも最初に表紙が表示されるようになる
cover_linear: null
# review-compileに渡すパラメータ
params: --stylesheet=sample.css
# Pygmentsカラーリングを利用する (pygments外部gemが必要)
# pygments: true
# デバッグフラグ。nullでないときには一時ファイルをカレントディレクトリに作成し、削除もしない
debug: null
